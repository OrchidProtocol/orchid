service: pac
app: pac
org: orchid

custom:
  pythonRequirements:
    dockerizePip: non-linux
    zip: false
    slim: false
  myEnvironment:
    TOKEN:
      prod: "0x4575f41308EC1483f3d399aa9a2826d74Da13Deb"
      dev: "0xff9978B7b309021D39a76f52Be377F2B95D72394"
    LOTTERY:
      prod: "0xb02396f06CC894834b7934ecF8c8E5Ab5C1d12F1"
      dev: "0xE0dCc70880bee5579DD93C317d272a4121A80117"
    VERIFIER:
      prod: "0x5D18Fe86BF42a3b2DdaEbDF7FD8Bc0578EAB71f7"
      dev: "0x5D18Fe86BF42a3b2DdaEbDF7FD8Bc0578EAB71f7"
    DEFAULT_POOL_SIZE:
      prod: "3"
      dev: "3"
    LOG_LEVEL:
      prod: "WARNING"
      dev: "DEBUG"
    ENABLE_MONITORING:
      prod: 'True'
      dev: 'True'
    PAC_FUNDER_PUBKEY_SECRET:
      prod: 'PAC_FUNDER_PUBKEY'
      dev: 'PAC_FUNDER_PUBKEY_DEV'
    PAC_FUNDER_PRIVKEY_SECRET:
      prod: 'PAC_FUNDER_PRIVKEY'
      dev: 'PAC_FUNDER_PRIVKEY_DEV'
    DEFAULT_GAS:
      prod: "21"
      dev: "13"
  datadog:
    addLayers: true
    flushMetricsToLogs: true
    apiKey: ${ssm:DATADOG_API_KEY~true}
  enterprise:
    logIngestMode: pull
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      migrate: true
provider:
  name: aws
  stage: ${opt:stage,'dev'}
  environment:
    TOKEN: ${self:custom.myEnvironment.TOKEN.${self:provider.stage}}
    LOTTERY: ${self:custom.myEnvironment.LOTTERY.${self:provider.stage}}
    VERIFIER: ${self:custom.myEnvironment.VERIFIER.${self:provider.stage}}
    RECEIPT_SANDBOX: 'False'
    AUTO_RETRY_WRONG_ENV_REQUEST: 'True'
    WEB3_INFURA_PROJECT_ID: ${ssm:WEB3_INFURA_PROJECT_ID~true}
    TABLE_NAME: PAC-${self:provider.stage}
    RECEIPT_TABLE_NAME: PAC-Receipts-${self:provider.stage}
    RESULT_TABLE_NAME: PAC-Result-${self:provider.stage}
    DEFAULT_POOL_SIZE: ${self:custom.myEnvironment.DEFAULT_POOL_SIZE.${self:provider.stage}}
    STAGE: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.myEnvironment.LOG_LEVEL.${self:provider.stage}}
    ENABLE_MONITORING: ${self:custom.myEnvironment.ENABLE_MONITORING.${self:provider.stage}}
    PAC_FUNDER_PUBKEY_SECRET: ${self:custom.myEnvironment.PAC_FUNDER_PUBKEY_SECRET.${self:provider.stage}}
    PAC_FUNDER_PRIVKEY_SECRET: ${self:custom.myEnvironment.PAC_FUNDER_PRIVKEY_SECRET.${self:provider.stage}}
    DEFAULT_GAS: ${self:custom.myEnvironment.DEFAULT_GAS.${self:provider.stage}}
  runtime: python3.8
  region: us-west-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.PAC_FUNDER_PUBKEY_SECRET}"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:provider.environment.PAC_FUNDER_PRIVKEY_SECRET}"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/WEB3_INFURA_PROJECT_ID"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/WEB3_INFURA_PROJECT_SECRET"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ PACTable, Arn ]
        - "Fn::GetAtt": [ ReceiptTable, Arn ]
        - "Fn::GetAtt": [ ResultTable, Arn ]
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
        - "lambda:InvokeAsync"
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:pac-${self:provider.stage}-MaintainPool"
functions:
  pac:
    handler: handler.main
    events:
      - http:
          path: submit
          method: post
  apple:
    handler: handler.apple
    events:
      - http:
          path: apple
          method: post
  MaintainPool:
    handler: pool.maintain_pool_wrapper
    events:
      - schedule: cron(0/15 * * * ? *)
  balance:
    handler: balance.main
    events:
      - schedule: cron(5/15 * * * ? *)
plugins:
  - serverless-plugin-datadog
  - serverless-pseudo-parameters
  - serverless-python-requirements
package:
  exclude:
    - venv/**
    - node_modules/**
resources:
  Resources:
    PACTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: price
            AttributeType: N
          - AttributeName: signer
            AttributeType: S
        KeySchema:
          - AttributeName: price
            KeyType: HASH
          - AttributeName: signer
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain
    ReceiptTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.RECEIPT_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: receipt
            AttributeType: S
        KeySchema:
          - AttributeName: receipt
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain
    ResultTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.RESULT_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: receipt
            AttributeType: S
        KeySchema:
          - AttributeName: receipt
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Delete
